# vim: filetype=nginx

types {
    text/csv csv;
}

upstream discourse { server 127.0.0.1:3000; }

{% for ip in nginx_set_real_ip_from %}
set_real_ip_from {{ ip }};
{% if loop.last %}
real_ip_header X-Forwarded-For;
real_ip_recursive on;
{% endif %}
{% endfor %}

proxy_cache_path /var/lib/nginx/cache keys_zone=one:10m max_size=200m;

map $http_x_forwarded_proto $thescheme {
    default $scheme;
    https https;
}

log_format log_discourse '[$time_local] $remote_addr "$request" '
                         '"$http_user_agent" "$sent_http_x_discourse_route" '
                         '$status $bytes_sent "$http_referer" '
                         '$upstream_response_time $request_time '
                         '"$sent_http_x_discourse_username"';

{% if nginx_ratelimit_enabled %}
limit_req_zone $binary_remote_addr zone=flood:10m rate={{ nginx_reqs_per_second }}r/s;
limit_req_zone $binary_remote_addr zone=bot:10m rate={{ nginx_reqs_per_minute }}r/m;
limit_req_status 429;
{% endif %}

{% if tls_enabled %}
server {
    server_name {{ discourse_hostname }};
    listen 80;
    listen [::]:80;

{% for header in response_headers %}
    add_header {{ header }};
{% endfor %}

    return 301 https://{{ discourse_hostname }}$request_uri;
}
{% endif %}

server {
    server_name {{ discourse_hostname }};
{% if tls_enabled %}
{% if http2_enabled %}
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
{% else %}
    listen 443 ssl;
    listen [::]:443 ssl;
{% endif %}
{% else %}
    listen 80;
    listen [::]:80;
{% endif %}

    access_log /var/log/nginx/access.log log_discourse buffer=16k;

    etag off;

{% if tls_enabled %}
    # https://wiki.mozilla.org/Security/Server_Side_TLS
    ssl_dhparam         /etc/pki/tls/discourse/dh{{ tls_dhparam_size }}.pem;
    ssl_certificate     /etc/pki/tls/discourse/{{ discourse_hostname }}.cert.pem;
    ssl_certificate_key /etc/pki/tls/discourse/{{ discourse_hostname }}.key.pem;
    ssl_session_timeout {{ nginx_ssl_session_timeout }};
    ssl_session_cache   shared:SSL:{{ nginx_ssl_session_cache }};
    ssl_buffer_size     {{ nginx_ssl_buffer_size }};

    ssl_protocols       {{ tls_protocols }};
    ssl_ciphers         {{ tls_ciphers }};

    ssl_prefer_server_ciphers on;

{% if tls_response_headers is defined %}
{% for header in tls_response_headers %}
    add_header {{ header }};
{% endfor %}
{% endif %}

{% if tls_ocsp_stapling_enabled %}
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/pki/tls/discourse/{{ discourse_hostname }}.ca-bundle.pem;
    resolver {{ nginx_resolver }};
    resolver_timeout {{ nginx_resolver_timeout }};
{% endif %}
{% endif %}

{% if tls_enabled %}
    if ($http_host != "{{ discourse_hostname }}") {
        return 444;
    }
{% endif %}

    # The maximum file upload size. Keep up to date when changing the
    # corresponding site setting.
    client_max_body_size {{ nginx_client_max_body_size }};

    set $public /var/www/discourse/public;

{% for header in response_headers %}
    add_header {{ header }};
{% endfor %}

    # Prevent direct download of backups.
    location ^~ /backups/ {
        internal;
    }

    location /favicon.ico {
      return 204;
      access_log off;
      log_not_found off;
    }

    location / {
        root $public;
        add_header ETag "";

        location ~* assets\.*\.(eot|ttf|woff|woff2|ico)$ {
            expires 1y;
            add_header Cache-Control public;
{% if discourse_cdn_enabled %}
            add_header Access-Control-Allow-Origin "{{ discourse_cdn_allow_origin | default('*') }}";
{% endif %}
        }

        location = /srv/status {
            access_log off;
            log_not_found off;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $thescheme;
            proxy_pass http://discourse;
            break;
        }

        location ~ ^/assets/ {
            expires 1y;
            gzip_static on;
            add_header Cache-Control public;
            break;
        }

        location ~ ^/plugins/ {
            expires 1y;
            add_header Cache-Control public;
        }

        location ~ /_?emoji.*\.(png|gif|jpg|jpeg)$/ {
            expires 1y;
            add_header Cache-Control public;
        }

        location ~ ^/uploads/ {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $thescheme;
            proxy_set_header X-Sendfile-Type X-Accel-Redirect;
            proxy_set_header X-Accel-Mapping $public/=/downloads/;
            expires 1y;
            add_header Cache-Control public;

{% if nginx_check_referer %}
            valid_referers {{ nginx_valid_referers }};
            if ($invalid_referer) {
                return 403;
            }
{% endif %}

            # Custom CSS.
            location ~ /stylesheet-cache/ {
                try_files $uri =404;
            }

            # This allows us to bypass rails.
            location ~* \.(gif|png|jpg|jpeg|bmp|tif|tiff)$ {
                try_files $uri =404;
            }

            # Thumbnails and optimized images.
            location ~ /_?optimized/ {
                try_files $uri =404;
            }

            proxy_pass http://discourse;
            break;
        }

        location ~ ^/admin/backups/ {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $thescheme;
            proxy_set_header X-Sendfile-Type X-Accel-Redirect;
            proxy_set_header X-Accel-Mapping $public/=/downloads/;
            proxy_pass http://discourse;
            break;
        }

        location ~ ^/(letter_avatar/|user_avatar|highlight-js|stylesheets|favicon/proxied) {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $thescheme;

            proxy_ignore_headers "Set-Cookie";
            proxy_hide_header "Set-Cookie";

            proxy_cache one;
            proxy_cache_valid 200 301 302 7d;
            proxy_cache_valid any 1m;
            proxy_pass http://discourse;
            break;
        }

        location /letter_avatar_proxy/ {
          # Don't sent client headers to avatars.discourse.org.
          proxy_method GET;
          proxy_pass_request_headers off;
          proxy_pass_request_body off;

          # Ignore cookies.
          proxy_ignore_headers "Set-Cookie";
          proxy_hide_header "Set-Cookie";

          proxy_cache one;
          proxy_cache_key $uri;
          proxy_cache_valid 200 7d;
          proxy_cache_valid 404 1m;

          proxy_pass https://avatars.discourse.org/;
        }

        # This means every file in public is tried first.
        try_files $uri @discourse;
    }

    location /downloads/ {
        internal;
        alias $public/;
    }

    location @discourse {
{% if nginx_ratelimit_enabled %}
        limit_req zone=flood burst={{ nginx_bursts_per_second }} nodelay;
        limit_req zone=bot burst={{ nginx_bursts_per_minute }} nodelay;
{% endif %}
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $thescheme;
        proxy_pass http://discourse;
    }
}
